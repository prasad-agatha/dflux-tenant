from dflux.api.views.ml.auto_ml import (
    train_and_test_split,
    logistic_regression,
    support_vector_classifier,
    decision_tree,
    random_forest,
    xgboost,
    knn,
    naive_bayes_classifier,
    multinomailNB_classifier,
    adaboost_classifier,
    multi_layer_perceptron_classifier,
    linear_regression,
    support_vector_machine_regressor,
    decision_tree_regressor,
    random_forest_regressor,
    xgb_regressor,
    kneighbors_regressor,
    polynomial_regression,
    lasso_regressor,
    ridge_regressor,
    elasticnet_regression,
    sgd_regression,
    gradientboosting_regression,
)

from dflux.api.views.ml.auto_ml import (
    lp_out_cross_validation,
    lo_out_cross_validation,
    hold_out_cross_validation,
    rep_rand_sample_cross_validation,
    k_fold_cross_validation,
    k_fold_stratified_cross_validation,
    nested_cross_validation,
)

# cross validation techniques
cross_validation_techniques = {
    "leave_p_out": lp_out_cross_validation,
    "leave_one_out": lo_out_cross_validation,
    "hold_out": hold_out_cross_validation,
    "repeated_random_sampling": rep_rand_sample_cross_validation,
    "k_fold": k_fold_cross_validation,
    "k_fold_stratified": k_fold_stratified_cross_validation,
    "nested_k_fold": nested_cross_validation,
}
# classification methods
modelling_methods = {
    "train_and_test_split": train_and_test_split,
    "logistic_regression_model": logistic_regression,
    "support_vector_classifier": support_vector_classifier,
    "decision_tree_classifier": decision_tree,
    "random_forest_classifier": random_forest,
    "xgboost_classifier": xgboost,
    "knn_classifier": knn,
    "naive_bayes_classifier": naive_bayes_classifier,
    "multinomailnb_classifier": multinomailNB_classifier,
    "adaboost_classifier": adaboost_classifier,
    "multi_layer_perceptron_classifier": multi_layer_perceptron_classifier,
    # regression methods
    "linear_regression": linear_regression,
    "support_vector_machine_regressor": support_vector_machine_regressor,
    "decision_tree_regressor": decision_tree_regressor,
    "random_forest_regressor": random_forest_regressor,
    "xgb_regressor": xgb_regressor,
    "kneighbors_regressor": kneighbors_regressor,
    "polynomial_regression": polynomial_regression,
    "lasso_regressor": lasso_regressor,
    "ridge_regressor": ridge_regressor,
    "elasticnet_regression": elasticnet_regression,
    "sgd_regression": sgd_regression,
    "gradientboosting_regression": gradientboosting_regression,
    # "lgbm_regression": lgbm_regression,
    # "catboost_regression": catboost_regression,
}
